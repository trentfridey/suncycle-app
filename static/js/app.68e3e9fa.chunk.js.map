{"version":3,"sources":["util.js","styles.js","TimeTables.js","App.js"],"names":["formatHours","hours","roundedMinutes","Math","floor","fractionalHoursToHoursMinutes","totalMinutes","minutes","wholeHours","buttonStyle","fontWeight","fontSize","height","flexGrow","flexShrink","flexBasis","textAlign","cursor","borderBottomWidth","borderBottomColor","backgroundColor","color","buttonTextStyle","padding","fontFamily","h2Style","borderWidth","borderColor","borderLeftWidth","borderRadius","marginTop","titleStyle","marginBottom","TimeTables","hoverDate","riseLabel","middayLabel","setLabel","hoursOfDaylight","remainingHours","location","View","Text","style","lat","lng","getMonth","getDate","getFullYear","NavButton","direction","handleNav","data","text","shift","align","TouchableOpacity","title","onPress","App","props","onObtainLocation","bind","defaultTimeRange","Date","now","window","initialLocation","series","generateSunSeries","state","timeRange","getSolstice","getEquinox","a","async","Location","status","console","log","this","coords","latitude","longitude","sunSeries","setState","d","delta","dateArray","currentDate","push","map","date","sin","cos","tan","acos","PI","degrees","radians","dayOfYear","Number","parseInt","tz","timeOffset","getTimezoneOffset","fracYear","equationOfTime","declination","hourAngle","sunrise","sunset","calculateSunriseSunset","hoursArray","getHoursOfDaylight","summer","indexOf","max","winter","min","equinoxes","abs","todaysDate","setHours","find","midday","nowHours","getHours","getMinutes","getSeconds","ScrollView","display","flexDirection","borderBottom","tracker","width","border","overflow","background","fill","stroke","strokeWidth","labels","angle","x","tickCount","dependentAxis","domain","axis","grid","strokeDasharray","tickLabels","tickFormat","toLocaleString","month","y","React","Component"],"mappings":"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","file":"static/js/app.68e3e9fa.chunk.js","sourcesContent":["import tz from 'timezone';\n\nexport const seconds = 1000\nexport const minutes = 60*seconds\nexport const hours = 60*minutes\nexport const days = 24*hours\n\nexport function formatHours (hours) {\n    if(!hours) return '--'\n    const roundedMinutes = Math.floor(hours*60)\n    const wholeHours = (roundedMinutes - roundedMinutes % 60)/60\n    return `${wholeHours}hrs ${Math.floor(hours *60) % 60}min`\n}\n\nexport function fractionalHoursToHoursMinutes (hours) {\n    const totalMinutes = Math.floor(hours * 60)\n    const minutes = totalMinutes % 60\n    const wholeHours = (totalMinutes - minutes) / 60\n    return `${wholeHours < 10 ? '0'+wholeHours : wholeHours}:${minutes < 10 ? '0'+minutes : minutes}`\n}\n\nexport const calculateSunriseSunset = ({lat, lng}, date) => {\n    const { sin, cos, tan,  acos, PI } = Math\n    const degrees = PI / 180\n    const radians = 180 / PI\n    const dayOfYear = Number.parseInt(tz(date, \"%j\"))\n    const hour = 0\n    const timeOffset = date.getTimezoneOffset()\n    \n    const fracYear = 2*PI / 365 * (dayOfYear -1 + (hour - 12)/24)\n\n    const equationOfTime = 229.18 * (7.5e-5 \n                                  + 1.868e-3 * cos(fracYear) \n                                  - 3.2e-2 * sin(fracYear) \n                                  - 1.4615e-2 * cos(2*fracYear) \n                                  - 4.0849e-2 * sin(2*fracYear)\n                                  )\n    const declination = 6.918e-3 \n                      - 3.99912e-1 * cos(fracYear) \n                      + 7.0257e-2 * sin(fracYear) \n                      - 6.758e-3 * cos(2*fracYear) \n                      + 9.07e-4 * sin(2*fracYear) \n                      - 2.697e-3 * cos(3*fracYear) \n                      + 1.48e-3 * sin(3*fracYear)\n    const hourAngle = acos(\n      cos(90.833*degrees) \n      / (cos(lat*degrees) * cos(declination)) \n      - (tan(lat*degrees) * tan(declination))\n    )\n\n    const sunrise = ((720 - 4 * (lng + hourAngle*radians) - equationOfTime) - timeOffset)/60\n    const sunset = ((720 - 4 * (lng - hourAngle*radians) - equationOfTime) - timeOffset)/60\n\n    return { sunrise, sunset }\n} ","\nexport const buttonStyle = { \n    fontWeight: 'bold', \n    fontSize: 20,\n    height: 60,\n    flexGrow: 1,\n    flexShrink: 0,\n    flexBasis: 'auto', \n    textAlign: 'left', \n    cursor: 'pointer',\n    borderBottomWidth: 2,\n    borderBottomColor: 'steelblue',\n    backgroundColor: '#101c24',\n    color: 'white'\n  };\n  \nexport const buttonTextStyle = {\n    color: 'white',\n    padding: 15,\n    fontFamily: 'monospace',\n    fontSize: 18\n  }\n  \nexport const h2Style = { \n    padding: 15,\n    borderWidth: 1,\n    backgroundColor: '#101c24',\n    borderColor: 'steelblue',\n    borderLeftWidth: 5,\n    color: 'white',\n    borderRadius: 5,\n    marginTop: 10,\n    fontSize: 18,\n    fontFamily: 'monospace'\n  }\n\nexport const titleStyle = { \n    textAlign: 'center',\n    padding: 15,\n    color: 'white',\n    marginBottom: 10,\n    fontSize: 28,\n    fontFamily: 'monospace'\n  }\n  ","import { formatHours } from \"./util\"\nimport { View, Text } from 'react-native';\nimport { h2Style } from \"./styles\";\n\n\nexport const TimeTables = ({\n    hoverDate, \n    riseLabel, \n    middayLabel, \n    setLabel, \n    hoursOfDaylight, \n    remainingHours, location\n}) => {\n    return (\n    <View>\n    <Text style={{ ...h2Style }}>\n    🌎 { `Lat: ${location.lat}, Lon: ${location.lng}` }\n    </Text>\n    <Text style={{ ...h2Style }}>\n    📅 Date: {hoverDate.getMonth() + 1}/{hoverDate.getDate()}/{hoverDate.getFullYear()}\n    </Text>\n    <Text style={{ ...h2Style }}>\n       🌅 Sunrise: {riseLabel}AM\n    </Text>\n    <Text style={{ ...h2Style }}>\n      🌤 Midday: {middayLabel}\n    </Text>\n    <Text style={{ ...h2Style}}>\n    🌇 Sunset: {setLabel}PM\n    </Text>\n    <Text style={{ ...h2Style }}>\n        ⏰ Daylight Hours: { formatHours(hoursOfDaylight) }\n    </Text>\n    <Text style={{ ...h2Style }}>\n    ⌚ Remaining Hours: {formatHours(remainingHours)}\n    </Text>\n    </View>\n    )\n    }","import { StyleSheet, ScrollView, View, Text, Button, TouchableOpacity} from 'react-native';\nimport React from \"react\";\nimport * as Location from 'expo-location';\nimport { days, fractionalHoursToHoursMinutes, calculateSunriseSunset } from './util'\nimport { TimeTables } from './TimeTables';\nimport { VictoryChart, VictoryLine, VictoryAxis } from 'victory-native'\nimport { buttonStyle, buttonTextStyle, titleStyle } from './styles'\n\nconst NavButton = ({direction, handleNav}) => {\n\n  \n  const data = {\n    text: direction == 'next' ? 'Next >' : '< Previous',\n    shift: direction == 'next' ? 1 : -1,\n    align: direction == 'next' ? 'right' : 'left'\n  }\n  return (\n  <TouchableOpacity \n    title={direction}\n    onPress={()=>handleNav(data.shift)} \n    style={buttonStyle}>\n      <Text style={{textAlign: data.align, ...buttonTextStyle}}>\n        {data.text}\n      </Text>\n    </TouchableOpacity>\n  )\n}\n\n\nclass App extends React.Component {\n  constructor (props){\n    super(props);\n    this.onObtainLocation = this.onObtainLocation.bind(this)\n    this.handleNav = this.handleNav.bind(this)\n    \n    const window = 240*days\n    const defaultTimeRange = [Date.now()-window/2, Date.now()+3*window/2]\n    const initialLocation = { lat: 35.835, lng: -78.783 }\n    const series = this.generateSunSeries(initialLocation, defaultTimeRange)\n    \n    this.state = { \n      timeRange: defaultTimeRange,\n      location: initialLocation,\n      series\n    }\n    this.getSolstice()\n    this.getEquinox()\n  }\n  async componentDidMount () {\n    let { status } = await Location.requestForegroundPermissionsAsync()\n    if (status !== 'granted') {\n      console.log('location not granted')\n      return\n    }\n    let location = await Location.getCurrentPositionAsync({})\n    this.onObtainLocation(location)\n  }\n  onObtainLocation ({ coords }){\n    const location = { lat: coords.latitude, lng: coords.longitude}\n    const sunSeries = this.generateSunSeries(location, this.state.timeRange)\n    this.setState({ sunSeries, location })\n    this.getSolstice()\n    this.getEquinox()\n  }\n  handleNav () {\n    return true // TODO: update current date\n  }\n  formatRelativeTicks (d) {\n    if(!d) return 'None'\n    const delta = (d - Date.now())\n    return `${Math.floor(delta/days)} d` \n  } \n  generateSunSeries ({lat, lng}, timeRange) {\n    const dateArray = []\n    for(let currentDate = timeRange[0]; currentDate < timeRange[1]; currentDate += 1*days) {\n      dateArray.push(new Date(currentDate))\n    }\n    return dateArray.map(date => {\n      const { sunrise, sunset } = calculateSunriseSunset({lat, lng}, date)\n      return { date, sunrise, sunset }\n    })\n  }\n  getHoursOfDaylight () {\n    return this.state.series.map(({ date, sunrise, sunset }) => {\n      return {date, hours: sunrise - sunset}\n    })\n  }\n  getSolstice() { \n    const hoursArray = this.getHoursOfDaylight()\n    const {date: longestDay} = hoursArray.indexOf(Math.max(hoursArray))\n    const {date: shortestDay} = hoursArray.indexOf(Math.min(hoursArray))\n    return { summer: longestDay, winter: shortestDay }\n  }\n  getEquinox () {\n    const hoursArray = this.getHoursOfDaylight()\n    const eps = 0.005\n    const equinoxes = []\n    for(let {date, hours} of hoursArray) {\n      if(Math.abs(hours - 12) < eps) equinoxes.push(date)\n    }\n    return equinoxes\n  }\n  render() {\n    const todaysDate = (new Date()).setHours(0,0,0,0)\n    const { sunrise, sunset } = this.state.series.find(({date}) => {\n      return date.setHours(0,0,0,0) == todaysDate\n    })\n    const midday = (sunset - sunrise)/2 + sunrise\n    const now = new Date()\n    const nowHours = now.getHours() + now.getMinutes()/60 + now.getSeconds()/(60*60)\n    const remainingHours = sunset > nowHours ? sunset - nowHours : 0\n    const riseLabel = fractionalHoursToHoursMinutes(sunrise)\n    const middayLabel = fractionalHoursToHoursMinutes(midday)\n    const setLabel = fractionalHoursToHoursMinutes(sunset-12)\n    const hoursOfDaylight = (sunset - sunrise);\n    \n    return (\n    <ScrollView style={{padding: '5%', backgroundColor: '#151d30', height: '100%' }}>\n      <Text style={{ fontSize: 32, textAlign: 'center'}}>🌞</Text>\n      <Text style={titleStyle}>Sunsettr</Text>\n      <TimeTables {...{\n        location: this.state.location,\n        hoverDate: new Date(),\n        riseLabel, \n        middayLabel, \n        setLabel, \n        hoursOfDaylight, \n        remainingHours\n        }}/>\n          <View style={{display: 'flex', flexDirection: 'row', marginTop: 15 }}>\n            <NavButton direction='previous' handleNav={this.handleNav}/>\n            <TouchableOpacity \n              style={{...buttonStyle, textAlign: 'center', borderBottom: '5px solid grey'}} \n              onPress={()=>this.setState({tracker: new Date()})}\n            >\n              <Text style={buttonTextStyle}>Today</Text>\n            </TouchableOpacity>\n            <NavButton direction='next' handleNav={this.handleNav}/>\n          </View>\n      <View style={{width: '100%', border: '1px solid black', overflow: 'hidden'}}>\n        <VictoryChart style={{background: { fill: 'steelblue' }}}>           \n          <VictoryLine\n            style={{\n              data: { stroke: \"red\", strokeWidth: 2 },\n              labels: { angle: -90, fill: \"red\", fontSize: 20 }\n            }}\n            x={() => todaysDate}\n          />\n          <VictoryAxis tickCount={24} dependentAxis domain={[0,24]} style={{ axis: { stroke: 'white'}, grid: { stroke: 'grey', strokeDasharray: 2 }, tickLabels: { fontSize: 8, stroke: 'none', fill: 'white'} }}/>\n          <VictoryAxis tickCount={12} tickFormat={x => (new Date(x)).toLocaleString('default', { month: 'short'})} style={{axis: { stroke: 'white'}, grid: { stroke: 'grey', strokeDasharray: 4}, tickLabels: { fontSize: 8, stroke: 'none', fill: 'white'} }}/>\n          <VictoryLine style={{data: { strokeWidth: 1, stroke: 'blue' }}} data={this.state.series} x={'date'} y={'sunrise'}/>\n          <VictoryLine style={{data: { strokeWidth: 1, stroke: 'orange'}}} data={this.state.series} x={'date'} y={'sunset'}/>\n        </VictoryChart>\n        </View>\n      </ScrollView>\n    );\n  }\n}\n\nexport default App;"],"sourceRoot":""}